// Service pour g√©rer les entreprises
import { buildApiUrl, getAuthHeaders, API_CONFIG } from './apiConfig';

export const companyService = {
  /**
   * R√©cup√©rer la liste des entreprises
   * @returns {Promise<Array>}
   */
  async getCompanies() {
    try {
      console.log('üîÑ R√©cup√©ration des entreprises...');
      const response = await fetch(buildApiUrl(API_CONFIG.ENDPOINTS.COMPANIES.LIST), {
        method: 'GET',
        headers: getAuthHeaders(),
      });

      console.log('üîÑ R√©ponse API status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erreur API:', errorData);
        throw new Error(errorData.message || 'Erreur lors de la r√©cup√©ration des entreprises');
      }

      const data = await response.json();
      console.log('‚úÖ Entreprises r√©cup√©r√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des entreprises:', error);
      throw error;
    }
  },

  /**
   * Cr√©er une nouvelle entreprise
   * @param {Object} companyData - Donn√©es de l'entreprise
   * @returns {Promise<Object>}
   */
  async createCompany(companyData) {
    try {
      // Nettoyer les donn√©es pour √©viter les erreurs de createdAt
      const cleanData = { ...companyData };
      delete cleanData.createdAt;
      delete cleanData.updatedAt;
      delete cleanData.id;
      
      console.log('üîÑ Cr√©ation de l\'entreprise avec les donn√©es:', cleanData);
      
      const response = await fetch(buildApiUrl(API_CONFIG.ENDPOINTS.COMPANIES.CREATE), {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(cleanData),
      });

      console.log('üîÑ R√©ponse API status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erreur API:', errorData);
        throw new Error(errorData.message || 'Erreur lors de la cr√©ation de l\'entreprise');
      }

      const data = await response.json();
      console.log('‚úÖ Entreprise cr√©√©e avec succ√®s:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'entreprise:', error);
      throw error;
    }
  },

  /**
   * Mettre √† jour une entreprise
   * @param {string} id - ID de l'entreprise
   * @param {Object} companyData - Nouvelles donn√©es
   * @returns {Promise<Object>}
   */
  async updateCompany(id, companyData) {
    try {
      // Nettoyer les donn√©es pour √©viter les erreurs de createdAt
      const cleanData = { ...companyData };
      delete cleanData.createdAt;
      delete cleanData.updatedAt;
      delete cleanData.id;
      
      console.log('üîÑ Mise √† jour de l\'entreprise avec les donn√©es:', cleanData);
      
      const response = await fetch(buildApiUrl(API_CONFIG.ENDPOINTS.COMPANIES.UPDATE, { id }), {
        method: 'PATCH',
        headers: getAuthHeaders(),
        body: JSON.stringify(cleanData),
      });

      console.log('üîÑ R√©ponse API status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Erreur API:', errorData);
        throw new Error(errorData.message || 'Erreur lors de la mise √† jour de l\'entreprise');
      }

      const data = await response.json();
      console.log('‚úÖ Entreprise mise √† jour avec succ√®s:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de l\'entreprise:', error);
      throw error;
    }
  },

  /**
   * Supprimer une entreprise
   * @param {string} id - ID de l'entreprise
   * @returns {Promise<Object>}
   */
  async deleteCompany(id) {
    try {
      const response = await fetch(buildApiUrl(API_CONFIG.ENDPOINTS.COMPANIES.DELETE, { id }), {
        method: 'DELETE',
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la suppression de l\'entreprise');
      }

      return await response.json();
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'entreprise:', error);
      throw error;
    }
  },

  /**
   * R√©cup√©rer une entreprise par ID
   * @param {string} id - ID de l'entreprise
   * @returns {Promise<Object>}
   */
  async getCompanyById(id) {
    try {
      const response = await fetch(buildApiUrl(API_CONFIG.ENDPOINTS.COMPANIES.GET_BY_ID, { id }), {
        method: 'GET',
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la r√©cup√©ration de l\'entreprise');
      }

      return await response.json();
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'entreprise:', error);
      throw error;
    }
  }
};

export default companyService; 